/*
Entrega a Atividade 1 - Algoritmos e Programa√ß√£o II

N√≥s,

Pedro Henrique Pinheiro de Oliveira
Gustavo de Medeiros Sanchez
Washington Oliveira da Silva

declaramos que todas as respostas s√£o fruto de nosso pr√≥prio trabalho,
n√£o copiamos respostas de colegas externos √† equipe,
n√£o disponibilizamos nossas respostas para colegas externos ao grupo e
n√£o realizamos quaisquer outras atividades desonestas para nos beneficiar ou prejudicar outros.
*/

import java.util.Scanner;
import java.util.Random;
//‡∂û

class Main {
  public static void main(String[] args) {
    Scanner ler = new Scanner(System.in);
    Random rng = new Random();
    int operation = 0;
    int[] theFArray = null;
   
   
    System.out.println("\nBem vindo ao Amazing Mega Blaster Nine F*cking Options Progam HAHAHAHAHAHA");

    // while faz com que o programa se repita at√© a pessoa escolher a op√ßao 9
    while (!(operation == 9)) {

      System.out.printf(
          "\n\n===============================================\n\n Escolha uma das op√ßoes abaixo: \n\n 1: Inicializar o vetor com n√∫meros aleat√≥rios \n\n 2: Imprimir o vetor \n\n 3: Verificar se um determinado n√∫mero est√° contido no vetor \n\n 4: Buscar o maior n√∫mero armazenado no vetor \n\n 5: Calcular a m√©dia dos n√∫meros pares armazenados no vetor \n\n 6: Calcular o percentual dos n√∫meros √≠mpares armazenados no vetor \n\n 7: Calcula a m√©dia centralizada dos n√∫meros armazenados no vetor \n\n 8: Verificar se dado um valor existe dois n√∫meros em posi√ß√µes distintas que somados s√£o iguais ao valor informado \n\n 9: Encerrar programa \n\n===============================================\n\n");

      operation = ler.nextInt();
      int op = operation; /* esse variavel √© apenas para tornar mais curto e legivel a condi√ßao na op√ßao 'default' do 'switch'/* */
                           

      switch (operation) {

        case 1:
          System.out.println("\n informe o tamanho do vetor:");
          int size = ler.nextInt();
          System.out.println("\n informe o numero limite do seu vetor::");
          int roof = ler.nextInt();

          theFArray = new int[size];                                                             

          for (int i = 0; i < size; i++) {
            int num = rng.nextInt(roof) + 1; // soma +1 para que o roof seja o maior numero e nao o excludente
            theFArray[i] = num;
          }

          break;

        case 2:
        printar(theFArray);
          break;

        case 3:
          System.out.println("\nInforme o valor que deseja procurar no vetor: ");
          int numSearch = ler.nextInt();
          break;
                                                                                                                                                                                                                                                                                        //‡∂û
        case 4:
          System.out.println("\nopissao 4");
          break;

        case 5:
          System.out.println("\nopissao 5");
          break;

        case 6:
          System.out.println("\nopissao 6");
          break;

        case 7:
          System.out.println("\nopissao 7");
          break;

        case 8:
          System.out.println("\nopissao 8");
          break;

        case 9:
          System.out.println("\nTchau");
          break;

        default:
          if (op != 0 || op != 1 || op != 2 || op != 3 || op != 4 || op != 5 || op != 6 || op != 7 || op != 8
              || op != 9) {
            System.out.println("\nFavor escolher uma op√ßao v√°lida!!"); /*  esse if √© enorme eu sei, mas serve para que
                                                                              algo aconte√ßa se uma op√ßao invalida for
                                                                              selecionada ao inves de s√≥ nao acontecer nada e voltar para o inicio do loop */
          }

      }
      
      }
  }
   //==================================================================FUNCAO 2==================================================================
   public static void printar (int[] theFArray) {
    for (int i = 0; i < theFArray.length; i++){
      System.out.println(theFArray[i] + " ");
    }
    
     } 
     //==================================================================FUNCAO 3==================================================================
    public static int numFound(int[] theFArray, int num ) {
      for (int i = 0; i < theFArray.length; i++){
        if (theFArray[i] == num){
          return i;
        }
      }
      return -1;
    }

     
     //==================================================================FUNCAO 4==================================================================


     //==================================================================FUNCAO 5==================================================================


     //==================================================================FUNCAO 6==================================================================


     //==================================================================FUNCAO 7==================================================================


     //==================================================================FUNCAO 8==================================================================
}
// tudo que for escrito entre ("") deve ter um '\n' antes para que possa ter um
// espa√ßamento agradavel aos olhos no console, xuxu beleza üëç












/*. „ÄÄ„ÄÄ„ÄÄ„ÄÇ„ÄÄ„ÄÄ„ÄÄ„ÄÄ‚Ä¢„ÄÄ „ÄÄÔæü„ÄÄ„ÄÄ„ÄÇ „ÄÄ„ÄÄ.

„ÄÄ„ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ „ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÇ„ÄÄ„ÄÄ „ÄÇ„ÄÄ. „ÄÄ

.„ÄÄ„ÄÄ „ÄÇ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ ‡∂û „ÄÇ . „ÄÄ„ÄÄ ‚Ä¢ „ÄÄ„ÄÄ„ÄÄ„ÄÄ‚Ä¢

„ÄÄ„ÄÄÔæü„ÄÄ„ÄÄ Red was not An Impostor.„ÄÄ „ÄÇ„ÄÄ.

„ÄÄ„ÄÄ'„ÄÄ„ÄÄ„ÄÄ 1 Impostor remains „ÄÄ „ÄÄ„ÄÄ„ÄÇ

„ÄÄ„ÄÄÔæü„ÄÄ„ÄÄ„ÄÄ.„ÄÄ„ÄÄ„ÄÄ. ,„ÄÄ„ÄÄ„ÄÄ„ÄÄ.„ÄÄ . 




 ‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†û‚†õ‚†õ‚†õ‚†õ‚¢∂‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚°æ‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£º‚°∑‚†∂‚†í‚†í‚†í‚†∂‚¢∂‚£Ñ‚†Ä‚†Ä‚†Ä‚¢ª‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢†‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ñ‚†Ä‚†Ä‚†à‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢∏‚°Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†É‚†Ä‚†Ä‚†Ä‚£ø‚†õ‚†õ‚¢ª‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢π‚°∑‚†∂‚£§‚£§‚£§‚£§‚£§‚°æ‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚†Ä‚†Ä‚†à‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ñ‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢∑‚£§‚°¥‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä
‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†∂‚¢§‚£§‚£§‚†∂‚¢æ‚°ø
‚†Ä‚†Ä‚†∏‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚°æ‚†ã‚†Ä
‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†∂‚†∂‚†∂‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°∂‚†û‚†õ‚†í‚†õ‚†ã‚†Å‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†≥‚†∂‚†¥‚†∂‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  */

